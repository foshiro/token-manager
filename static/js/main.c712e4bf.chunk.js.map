{"version":3,"sources":["pages/home/Home.tsx","app/etherSlice.ts","pages/balance/Balance.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Home","history","useHistory","a","detectEthereumProvider","provider","startApp","alert","on","handleAccountsChanged","request","method","accounts","length","push","primary","onClick","getBalance","createAsyncThunk","listAccounts","account","currentAccount","pop","balance","ethers","utils","formatEther","etherSlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectBalance","ether","Balance","inputTransfer","publicBalance","useSelector","dispatch","useDispatch","useEffect","ethereumProvider","providers","Web3Provider","init","className","label","placeholder","type","onAction","event","console","log","onChange","data","value","App","activePage","path","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAyCeA,MApCf,WACE,IAAMC,EAAUC,cADF,4CAGd,4BAAAC,EAAA,sEACyBC,MADzB,QACQC,EADR,QAGIC,EAASD,GAETE,MAAM,4BALV,4CAHc,sBAYd,SAASD,EAASD,GAEhBA,EAASG,GAAG,kBAAmBC,GAE/BJ,EAASK,QAAQ,CACfC,OAAQ,wBAKZ,SAASF,EAAsBG,GACL,IAApBA,EAASC,OACXN,MAAM,uCAENN,EAAQa,KAAK,YAIjB,OACE,cAAC,SAAD,CAAQC,SAAO,EACbC,QAhCU,2CA+BZ,sB,oDCxBSC,EAAaC,YACxB,mBADwC,uCAExC,WAAOb,GAAP,mBAAAF,EAAA,sEACwBE,EAASc,eADjC,cACQC,EADR,OAEQC,EAAiBD,EAAQE,MAFjC,SAIsBjB,EAASY,WAAWI,GAJ1C,cAIME,EAJN,yBAKSC,IAAOC,MAAMC,YAAYH,IALlC,2CAFwC,uDAW7BI,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAjBiC,CACjCP,QAAS,IAiBTQ,SAAU,GACVC,cAAe,SAACC,GACdA,EACGC,QAAQjB,EAAWkB,WAAW,SAACC,EAAOC,GACrCD,EAAMb,QAAUc,EAAOC,cAKlBC,EAAgB,SAACH,GAAD,OAAsBA,EAAMI,MAAMjB,SAEhDI,IAAf,QCmBec,MAjDf,WACE,IAAIC,EACAC,EAAgBC,YAAYL,GAC1BM,EAAWC,cA6BjB,OA3BAC,qBAAU,YACE,uCAAG,mBASIzC,EATJ,WAAAH,EAAA,iGAAAA,EAAA,MASX,WAAwB6C,GAAxB,eAAA7C,EAAA,sEACuB,IAAIqB,IAAOyB,UAAUC,aAAaF,GADzD,OACM3C,EADN,OAEEwC,EAAS5B,EAAWZ,IAFtB,4CATW,uBASIC,EATJ,qDACYF,MADZ,YACLC,EADK,wBAGTC,EAASD,GAHA,8BAKTE,MAAM,4BALG,uEAAH,qDAcV4C,KACC,IAYD,gCACE,0CAGA,4CACYR,KAEZ,qBAAKS,UAAU,oCAAf,SACE,cAAC,QAAD,CAAOC,MAAM,WAAWC,YAAY,QAAQC,KAAK,SAC/ClB,OAAO,WAAWmB,SAf1B,SAAkBC,GAEhBC,QAAQC,IAAI,CAACjB,mBAcPkB,SApBR,SAA8BH,EAAYI,GACxCnB,EAAgBmB,EAAKC,eCKVC,MAxBf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,cAAC,SAAD,CAAQY,WAAW,gBACnB,cAAC,OAAD,UACE,cAAC,IAAD,UACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,qBCtBHC,EAAQC,YAAe,CAClCC,QAAS,CACP5B,MAAO6B,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.c712e4bf.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from 'decentraland-ui'\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\nfunction Home() {\n  const history = useHistory();\n\n  async function connectWallet() {\n    const provider = await detectEthereumProvider();\n    if (provider) {\n      startApp(provider);\n    } else {\n      alert('Please install MetaMask!');\n    }\n  };\n\n  function startApp(provider: any) {\n    debugger\n    provider.on('accountsChanged', handleAccountsChanged);\n\n    provider.request({\n      method: 'eth_requestAccounts'\n    });\n\n  };\n\n  function handleAccountsChanged(accounts: []) {\n    if (accounts.length === 0) {\n      alert('Please connect your MetaMask wallet');\n    } else {\n      history.push(\"/balance\");\n    }\n  };\n\n  return (\n    <Button primary\n      onClick={connectWallet}>CONNECT</Button>\n  )\n}\n\nexport default Home;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from './store';\nimport { ethers } from \"ethers\";\n\nexport interface CounterState {\n  balance: string;\n}\n\nconst initialState: CounterState = {\n  balance: '',\n};\n\nexport const getBalance = createAsyncThunk(\n  'ether/getBalance',\n  async (provider: ethers.providers.Web3Provider) => {\n    const account = await provider.listAccounts();\n    const currentAccount = account.pop();\n\n    let balance = await provider.getBalance(currentAccount as string);\n    return ethers.utils.formatEther(balance);\n  }\n);\n\nexport const etherSlice = createSlice({\n  name: 'ether',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getBalance.fulfilled, (state, action) => {\n        state.balance = action.payload;\n      })\n  },\n});\n\nexport const selectBalance = (state: RootState) => state.ether.balance;\n\nexport default etherSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { ethers } from \"ethers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBalance, selectBalance } from \"../../app/etherSlice\";\nimport { Field } from \"decentraland-ui\";\n\nfunction Balance() {\n  let inputTransfer: any;\n  let publicBalance = useSelector(selectBalance);\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const init = async () => {\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        startApp(provider);\n      } else {\n        alert('Please install MetaMask!');\n        return;\n      };\n\n      async function startApp(ethereumProvider: any) {\n        let provider = await new ethers.providers.Web3Provider(ethereumProvider);\n        dispatch(getBalance(provider));\n      };\n    };\n    init();\n  }, []);\n\n  function changeTransferAmount(event: any, data: any) {\n    inputTransfer = data.value;\n  }\n\n  function transfer(event: any) {\n    //TODO: Transfer token\n    console.log({inputTransfer})\n  }\n\n  return (\n    <div>\n      <h1>\n        Overview\n      </h1>\n      <div>\n        Balance: {publicBalance}\n      </div>\n      <div className=\"d-flex justify-content-center p-5\">\n        <Field label=\"Transfer\" placeholder=\"1,000\" type=\"number\"\n          action=\"Transfer\" onAction={transfer}\n          onChange={changeTransferAmount}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Balance;\n","import React from 'react';\nimport Home from './pages/home/Home';\nimport './App.css';\nimport 'decentraland-ui/lib/styles.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Balance from \"./pages/balance/Balance\";\nimport { Navbar, Page } from \"decentraland-ui\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"Page-story-container\">\n          <Navbar activePage=\"marketplace\" />\n          <Page>\n            <Router>\n            <Switch>\n              <Route path=\"/balance\">\n                <Balance />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n          </Page>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './etherSlice';\n\nexport const store = configureStore({\n  reducer: {\n    ether: counterReducer,\n  },\n});\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}